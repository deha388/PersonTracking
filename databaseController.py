#project is in the localhost
#so database connection is not using for now

import time

import pandas as pd
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

# some_dict={35: [177.2, 178.0, 183.6, 177.2, 182.6], 89: [188.8, 185.8, 181.0, 190.0, 193.0], 92: [196.0, 196.0, 190.6, 191.2, 194.8], 267: [184.0, 177.2, 173.5, 174.6, 182.2]}
some_dict = {35: [175.57142857142858, 185.4, 178.6, 177.8, 185.0, 186.6, 177.4, 182.2],
             89: [191.2, 190.6, 198.4, 186.4, 185.8, 202.0, 196.0, 194.5],
             92: [199.0, 183.4, 191.8, 193.6, 188.8, 206.2, 199.6, 193.0],
             267: [179.6, 186.4, 180.0, 183.6, 188.6, 180.75, 181.6, 179.4],
             268: [202.0, 195.25, 198.4, 194.2, 188.2, 209.0, 197.2, 193.0],
             272: [184.0, 183.4, 181.0, 191.5, 176.5, 185.0, 189.4, 186.4],
             275: [193.8, 179.0, 190.4, 184.4, 181.0, 204.4, 187.8, 184.8],
             284: [185.0, 169.0, 177.25, 181.0, 178.0, 184.0, 184.0, 185.2],
             293: [192.25, 191.8, 177.4, 187.6, 180.4, 187.0, 203.2, 185.8],
             326: [193.0, 196.0, 196.0, 190.0, 175.0, 193.0, 199.0, 193.0],
             335: [186.4, 187.75, 192.4, 191.8, 179.5, 196.0, 196.0, 194.2],
             341: [174.2, 176.6, 181.8, 179.6, 173.2, 174.8, 177.8, 177.4],
             370: [178.8, 175.6, 176.2, 176.6, 183.8, 177.0, 175.0, 176.4],
             389: [189.4, 190.0, 191.2, 190.0, 181.0, 190.6, 200.2, 185.2],
             412: [184.0, 180.4, 193.0, 185.5, 181.6, 188.2, 194.2, 188.2],
             428: [186.4, 187.6, 190.0, 186.4, 199.0, 189.4, 181.6, 192.4],
             440: [190.0, 191.0, 199.4, 197.8, 189.0, 196.8, 201.8, 187.6],
             478: [177.8, 184.6, 180.4, 184.2, 188.4, 180.25, 182.6, 180.4],
             483: [184.0, 193.0, 196.6, 184.0, 188.8, 190.0, 191.8, 187.0],
             486: [185.8, 195.4, 186.25, 189.0, 189.4, 192.4, 186.4, 187.0],
             488: [190.0, 184.0, 193.0, 192.4, 183.4, 203.2, 195.25, 186.4],
             495: [187.0, 190.0, 185.8, 182.8, 185.8, 188.5, 185.2, 186.4],
             775: [194.8, 185.8, 193.0, 188.8, 177.2, 199.8, 189.8, 188.0],
             1009: [185.2, 178.0, 186.4, 186.4, 175.0, 194.2, 187.0, 190.6],
             1015: [178.0, 173.5, 187.0, 185.5, 175.0, 181.6, 187.0, 179.2],
             1111: [195.4, 193.0, 199.0, 198.4, 186.4, 196.6, 199.6, 192.4],
             1204: [187.8, 183.8, 189.6, 184.8, 184.0, 203.8, 195.8, 193.8],
             1211: [189.8, 188.0, 190.8, 189.8, 186.0, 199.2, 192.8, 191.2],
             1220: [192.8, 189.8, 196.6, 192.4, 186.8, 202.8, 197.0, 190.8],
             1760: [190.6, 193.0, 199.0, 185.2, 189.0, 195.4, 194.2, 193.0],
             1772: [190.6, 188.2, 192.4, 188.2, 190.0, 190.0, 199.0, 188.2],
             1779: [195.4, 196.0, 195.4, 195.4, 187.0, 198.4, 197.8, 195.4],
             1921: [195.4, 191.8, 190.6, 192.4, 190.0, 201.4, 197.2, 189.4],
             1922: [189.4, 198.4, 193.6, 187.6, 190.0, 190.0, 186.4, 190.0],
             2254: [193.0, 193.6, 196.6, 183.4, 183.4, 195.4, 199.0, 193.6],
             2261: [197.2, 195.4, 195.4, 200.8, 187.0, 200.2, 205.0, 191.8],
             2262: [191.2, 181.6, 193.6, 190.0, 181.0, 191.8, 193.0, 201.4],
             2265: [197.8, 181.0, 196.75, 186.4, 181.0, 194.8, 194.2, 193.0],
             2290: [193.0, 181.0, 190.0, 185.8, 186.4, 193.0, 185.8, 190.0],
             2323: [201.4, 184.0, 193.75, 190.6, 181.0, 195.0, 196.6, 196.0],
             2335: [187.0, 191.2, 194.8, 189.4, 184.0, 197.2, 190.75, 191.0],
             2340: [187.0, 189.25, 196.6, 188.2, 186.0, 194.2, 199.0, 193.0],
             2352: [195.4, 176.8, 199.6, 193.6, 186.4, 211.0, 198.4, 187.6],
             2367: [187.0, 202.0, 191.8, 188.2, 191.8, 183.4, 188.2, 184.0],
             2372: [176.5, 179.5, 181.0, 187.0, 191.2, 181.0, 178.0, 180.25],
             2374: [182.0, 188.0, 190.6, 187.0, 184.75, 193.0, 187.0, 188.5],
             2530: [199.0, 178.0, 190.6, 190.0, 183.25, 193.0, 198.0, 190.6],
             2531: [196.0, 184.75, 191.8, 191.2, 188.2, 196.5, 200.8, 202.6],
             2549: [191.8, 178.0, 192.4, 194.2, 179.5, 195.0, 194.2, 192.4],
             2576: [194.8, 190.6, 198.4, 191.2, 190.75, 193.6, 196.0, 188.2],
             2578: [184.0, 190.6, 191.5, 189.4, 185.8, 194.8, 198.4, 187.6],
             2587: [200.8, 185.8, 188.2, 189.4, 187.6, 192.4, 194.8, 195.4],
             2674: [202.2, 188.5, 199.6, 196.0, 185.5, 196.0, 203.8, 192.4],
             2728: [189.4, 184.75, 192.4, 184.0, 186.0, 191.8, 190.6, 192.4],
             2857: [185.2, 191.2, 190.6, 189.4, 189.4, 187.6, 184.0, 187.6],
             2890: [192.4, 193.6, 186.4, 178.0, 188.8, 190.0, 189.25, 185.2],
             2891: [183.4, 195.0, 190.0, 187.6, 186.4, 194.71428571428572, 189.4, 186.4],
             2979: [206.4, 184.0, 198.4, 197.2, 184.0, 205.8, 199.0, 195.4],
             2987: [201.4, 184.6, 198.4, 191.8, 185.8, 195.4, 193.6, 196.0],
             3075: [187.6, 176.5, 191.2, 191.2, 173.0, 208.8, 193.0, 187.6],
             3080: [190.0, 182.5, 193.0, 188.2, 181.0, 202.0, 192.6, 186.4],
             3092: [186.4, 186.4, 190.0, 184.6, 187.0, 201.4, 196.6, 185.8],
             3100: [194.2, 182.0, 191.2, 184.6, 178.0, 191.8, 191.8, 183.4],
             3130: [196.0, 192.25, 189.4, 192.4, 188.2, 193.0, 200.8, 194.8],
             3142: [178.6, 175.0, 177.0, 175.0, 169.0, 176.8, 180.4, 187.0],
             3147: [182.5, 195.5, 193.0, 183.25, 193.0, 187.0, 196.0, 181.6],
             3150: [181.6, 187.0, 185.2, 187.0, 192.4, 184.0, 189.4, 184.0],
             3153: [195.4, 191.8, 194.8, 192.4, 181.6, 208.6, 199.0, 199.0],
             3155: [182.8, 188.2, 188.8, 179.2, 187.75, 187.0, 185.5, 182.0],
             3158: [190.0, 194.2, 189.25, 192.25, 191.8, 192.25, 192.0, 181.0],
             3169: [178.75, 188.8, 188.5, 190.75, 198.4, 182.2, 182.5, 179.5],
             3230: [185.5, 189.4, 191.8, 187.0, 187.0, 189.25, 187.6, 193.0],
             3237: [184.6, 190.0, 190.6, 188.8, 192.4, 188.8, 184.0, 184.0],
             3242: [190.0, 183.25, 191.8, 186.4, 186.4, 192.25, 184.0, 183.4],
             3250: [188.8, 188.2, 198.4, 199.0, 190.0, 195.4, 196.6, 187.6],
             3290: [172.0, 172.0, 175.0, 179.8, 169.0, 178.0, 181.0, 179.2],
             3291: [203.2, 184.75, 191.2, 201.4, 180.4, 197.2, 208.0, 198.4],
             3297: [190.0, 178.0, 190.0, 188.8, 178.0, 203.2, 195.4, 188.8],
             3307: [194.2, 179.8, 189.4, 186.4, 183.4, 204.4, 194.8, 182.8],
             3356: [201.4, 179.0, 195.4, 195.4, 186.4, 199.6, 191.8, 191.8],
             3365: [195.4, 178.0, 192.4, 196.0, 188.2, 199.6, 196.6, 190.6],
             3396: [182.8, 176.0, 187.6, 187.0, 178.0, 187.0, 187.0, 190.6],
             3397: [200.8, 194.8, 200.5, 194.8, 175.0, 195.4, 197.2, 195.14285714285714],
             3398: [177.4, 173.2, 177.4, 175.0, 170.2, 176.8, 178.8, 177.2],
             3401: [176.8, 184.0, 184.6, 182.5, 181.6, 181.0, 184.0, 181.6],
             3405: [185.2, 200.2, 190.0, 190.0, 190.75, 187.0, 182.8, 188.2],
             3499: [182.5, 184.6, 185.5, 187.0, 191.8, 187.0, 176.5, 189.4],
             3638: [188.2, 194.8, 190.2, 183.25, 189.4, 192.0, 193.0, 185.8],
             3721: [189.0, 193.0, 190.6, 187.0, 188.5, 190.0, 192.4, 190.0],
             3919: [190.8, 187.8, 190.4, 188.4, 186.0, 202.8, 195.8, 192.0],
             3923: [193.8, 190.8, 198.8, 193.0, 185.0, 199.0, 191.0, 190.8],
             3974: [193.75, 196.0, 193.0, 197.2, 185.5, 199.0, 201.4, 195.4]}

PavoDataset = pd.read_csv('datasets/dataset1.csv')
# print(PavoDataset.head(6))
# print(PavoDataset.describe())
location = PavoDataset['location2'][:]
# print(location.head(6))

X = PavoDataset.drop(['location2', 'location1','location3'], axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, location, test_size=0.10)

knn = KNeighborsClassifier(n_neighbors=3, metric='minkowski')

knn.fit(X_train, y_train)

open('xyz.txt', 'w')


def predictData():
    values = []
    for key in some_dict:

        asd = some_dict[key]
        va = knn.predict(list([asd]))
        print("2) Using K Neighbors Classifier Prediction is " + str(key) + str(va))

        if va == 1:
            PavoDataset = pd.read_csv('datasets/1.csv')
            location1 = PavoDataset['location1'][:]
            X = PavoDataset.drop(['location2', 'location1'], axis=1)
            X_train, X_test, y_train, y_test = train_test_split(X, location1, test_size=0.10)
            knn1 = KNeighborsClassifier(n_neighbors=5, metric='minkowski')
            knn1.fit(X_train, y_train)
            asd = some_dict[key]
            va1 = knn1.predict(list([asd]))
            print("1) Using K Neighbors Classifier Prediction is " + str(key) + str(va1))
            with open("xyz.txt", 'a') as output:
                output.write(str(key) + "," + str(va1) + "\n")


        elif va == 2:
            PavoDataset = pd.read_csv('datasets/2.csv')
            location1 = PavoDataset['location1'][:]
            X = PavoDataset.drop(['location2', 'location1'], axis=1)
            X_train, X_test, y_train, y_test = train_test_split(X, location1, test_size=0.10)
            knn2 = KNeighborsClassifier(n_neighbors=5, metric='minkowski')
            knn2.fit(X_train, y_train)
            asd = some_dict[key]
            va2 = knn2.predict(list([asd]))
            print("1) Using K Neighbors Classifier Prediction is " + str(key) + str(va2))

            with open("xyz.txt", 'a') as output:
                output.write(str(key) + "," + str(va2) + "\n")
        elif va == 3:
            PavoDataset = pd.read_csv('datasets/3.csv')
            location1 = PavoDataset['location1'][:]
            X = PavoDataset.drop(['location2', 'location1'], axis=1)
            X_train, X_test, y_train, y_test = train_test_split(X, location1, test_size=0.10)
            knn3 = KNeighborsClassifier(n_neighbors=5, metric='minkowski')
            knn3.fit(X_train, y_train)
            asd = some_dict[key]
            va3 = knn3.predict(list([asd]))
            print("1) Using K Neighbors Classifier Prediction is " + str(key) + str(va3))
            with open("xyz.txt", 'a') as output:
                output.write(str(key) + "," + str(va3) + "\n")
        else:
            PavoDataset = pd.read_csv('datasets/4.csv')
            location1 = PavoDataset['location1'][:]
            X = PavoDataset.drop(['location2', 'location1'], axis=1)
            X_train, X_test, y_train, y_test = train_test_split(X, location1, test_size=0.10)
            knn4 = KNeighborsClassifier(n_neighbors=5, metric='minkowski')
            knn4.fit(X_train, y_train)
            asd = some_dict[key]
            va4 = knn4.predict(list([asd]))
            print("1) Using K Neighbors Classifier Prediction is " + str(key) + str(va4))
            with open("xyz.txt", 'a') as output:
                output.write(str(key) + "," + str(va4) + "\n")


predictData()

time.sleep(5)

import frontend
